
Sch√©ma de la base de donn√©es g√©n√©r√©e √† partir du code



SUITE GUIDE 2 (Les 3 r√¥les)
Les 3 r√¥les 
R√¥le USER
R√¥le MANAGER
R√¥le ADMIN

1 ‚Äì Commencer par cr√©er 4 utilisateurs 

Utilisateur 1

POST /api/Auth/register
{
"username": "hrehouma",
"email": "hrehouma@xtrawork.com",
"password": "hrehouma",
"firstName": "Haythem",
"lastName": "Rehouma"
}

Utilisateur 2
POST /api/Auth/register
{
"username": "admin1",
"email": "admin1@xtrawork.com",
"password": "Admin!123",
"firstName": "Admin",
"lastName": "One"
}

Utilisateur 3
POST /api/Auth/register
{
"username": "manager1",
"email": "manager1@xtrawork.com",
"password": "Manager!123",
"firstName": "Manager",
"lastName": "One"
}

Utilisateur 4
POST /api/Auth/register
{
"username": "employee1",
"email": "employee1@xtrawork.com",
"password": "Employee!123",
"firstName": "Employee",
"lastName": "One"
}


2 ‚Äì Changer les r√¥les
USE XtraWork;
UPDATE Users 
SET Role = 'Admin' 
WHERE Username = admin1;


USE XtraWork;
UPDATE Users 
SET Role = Manager 
WHERE Username = manager1;

USE XtraWork;
UPDATE Users 
SET Role = 'User' 
WHERE Username = employee1;

3- Testez les endpoints du r√¥le Administrateur  

4- Testez les endpoints du r√¥le Manager  

5- Testez les endpoints du r√¥le User 

Comment changer d‚Äôutilisateur et de r√¥le?

Utilisateur 1 ‚Äì hrehouma (USER)
Login
POST /api/Auth/login
{
  "username": "hrehouma",
  "password": "hrehouma"
}


Profil courant
GET /api/Auth/me
Authorization: Bearer {TOKEN_OBTENU}


Ou simplement allez en haut √† droite dans Swagger et coller le TOKEN_OBTENU (M√âTHODE PR√âF√âR√âE)


Utilisateur 2 ‚Äì admin1 (ADMIN)
Login
POST /api/Auth/login
{
  "username": "admin1",
  "password": "Admin!123"
}


Profil courant
GET /api/Auth/me
Authorization: Bearer {TOKEN_ADMIN1}


Ou simplement allez en haut √† droite dans Swagger et coller le TOKEN_OBTENU (M√âTHODE PR√âF√âR√âE)


Utilisateur 3 ‚Äì manager1 (MANAGER)
Login
POST /api/Auth/login
{
  "username": "manager1",
  "password": "Manager!123"
}


Profil courant
GET /api/Auth/me
Authorization: Bearer {TOKEN_MANAGER1}
Ou simplement allez en haut √† droite dans Swagger et coller le TOKEN_OBTENU (M√âTHODE PR√âF√âR√âE)


Utilisateur 4 ‚Äì employee1 (USER)
Login
POST /api/Auth/login
{
  "username": "employee1",
  "password": "Employee!123"
}


Profil courant
GET /api/Auth/me
Authorization: Bearer {TOKEN_EMPLOYEE1}


Ou simplement allez en haut √† droite dans Swagger et coller le TOKEN_OBTENU (M√âTHODE PR√âF√âR√âE)




3- Testez les endpoints du r√¥le Administrateur  

Utilisateur 2 ‚Äì admin1 (ADMIN)
2.1 - Login
POST /api/Auth/login
{
  "username": "admin1",
  "password": "Admin!123"
}


2.2 ‚Äì Ajout du token √† Swagger
Ou simplement allez en haut √† droite dans Swagger et coller le TOKEN_OBTENU (M√âTHODE PR√âF√âR√âE)




2.3 - Profil courant
GET /api/Auth/me









Je vous pr√©sente la checklist compl√®te des tests pour le r√¥le ADMIN, sous forme de points clairs.

‚úÖ Tests ADMIN ‚Äì R√©sum√© par Points
Authentification
Inscription (POST /api/Auth/register)
Passage du r√¥le √† Admin (via SQL/assign)
Connexion (POST /api/Auth/login)
V√©rifier profil (GET /api/Auth/me)
Tests sur Titles
Lire tous les Titles (GET /api/Title)
Cr√©er un Title (POST /api/Title)
Cr√©er plusieurs Titles (POST /api/Title)
Modifier un Title (PUT /api/Title/{id})
R√©cup√©rer un Title sp√©cifique (GET /api/Title/{id})
Supprimer un Title (DELETE /api/Title/{id})
Tests sur Employees
Cr√©er plusieurs Employees (POST /api/Employee)
Lire tous les Employees (GET /api/Employee)
Lire un Employee sp√©cifique (GET /api/Employee/{id})
Modifier un Employee (PUT /api/Employee/{id})
Supprimer un Employee (DELETE /api/Employee/{id})
V√©rifier Employee supprim√© (GET /api/Employee/{id} ‚Üí 404)
Tests de Validation
Cr√©er Title trop court (POST /api/Title) ‚Üí 400
Cr√©er Title trop long (POST /api/Title) ‚Üí 400
Cr√©er Employee trop jeune (<16 ans) ‚Üí 400
Cr√©er Employee trop vieux (>70 ans) ‚Üí 400
Cr√©er Employee avec genre invalide ‚Üí 400
Cr√©er Employee avec TitleId invalide ‚Üí 400


‚úÖ Tests ADMIN ‚Äì Format JSON
{
  "role": "ADMIN",
  "tests": {
    "auth": [
      "POST /api/Auth/register (inscription)",
      "Assigner r√¥le Admin (SQL ou assign)",
      "POST /api/Auth/login (connexion)",
      "GET /api/Auth/me (profil)"
    ],
    "titles": [
      "GET /api/Title (lire tous)",
      "POST /api/Title (cr√©er 1)",
      "POST /api/Title (cr√©er plusieurs)",
      "PUT /api/Title/{id} (modifier)",
      "GET /api/Title/{id} (r√©cup√©rer sp√©cifique)",
      "DELETE /api/Title/{id} (supprimer)"
    ],
    "employees": [
      "POST /api/Employee (cr√©er plusieurs)",
      "GET /api/Employee (lire tous)",
      "GET /api/Employee/{id} (r√©cup√©rer sp√©cifique)",
      "PUT /api/Employee/{id} (modifier)",
      "DELETE /api/Employee/{id} (supprimer)",
      "GET /api/Employee/{id} (v√©rifier supprim√© ‚Üí 404)"
    ],
    "validations": [
      "POST /api/Title (description trop courte ‚Üí 400)",
      "POST /api/Title (description trop longue ‚Üí 400)",
      "POST /api/Employee (√¢ge <16 ‚Üí 400)",
      "POST /api/Employee (√¢ge >70 ‚Üí 400)",
      "POST /api/Employee (genre invalide ‚Üí 400)",
      "POST /api/Employee (titleId inexistant ‚Üí 400)"
    ]
  }
}

Voir l‚Äôannexe pour des tests avec des corps de requ√™te !

Annexe 1 


POST /api/Auth/register (inscription)
{
  "username": "admin",
  "email": "admin@xtrawork.com",
  "password": "Admin123!",
  "firstName": "Sophie",
  "lastName": "Administrateur"
}

POST /api/Auth/login (connexion)
{
  "username": "admin",
  "password": "Admin123!"
}

GET /api/Auth/me (profil)
(pas de corps requis)

POST /api/Title (cr√©er 1)
{
  "description": "Analyste Business"
}

POST /api/Title (cr√©er plusieurs)
{
  "description": "DevOps Engineer"
}

PUT /api/Title/{id} (modifier)
{
  "description": "Analyste Business Senior"
}

GET /api/Title/{id} (r√©cup√©rer sp√©cifique)
(pas de corps requis)

DELETE /api/Title/{id} (supprimer)
(pas de corps requis)


POST /api/Employee (cr√©er plusieurs)
{
  "firstName": "Thomas",
  "lastName": "Bernard",
  "birthDate": "1995-11-08",
  "gender": "M",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}

PUT /api/Employee/{id} (modifier)
{
  "firstName": "Thomas",
  "lastName": "Bernard-Dupont",
  "birthDate": "1995-11-08",
  "gender": "M",
  "titleId": "M√äME-ID-QUE-AVANT"
}

GET /api/Employee/{id} (r√©cup√©rer sp√©cifique)
(pas de corps requis)

DELETE /api/Employee/{id} (supprimer)
(pas de corps requis)

GET /api/Employee/{id} (v√©rifier supprim√© ‚Üí 404)
(pas de corps requis)


Tests de Validation
POST /api/Title (description trop courte ‚Üí 400)
{
  "description": "D"
}

POST /api/Title (description trop longue ‚Üí 400)
{
  "description": "Ce titre est beaucoup trop long et d√©passe largement la limite de 100 caract√®res autoris√©s par la validation configur√©e"
}

POST /api/Employee (√¢ge <16 ‚Üí 400)
{
  "firstName": "Jeune",
  "lastName": "Employ√©",
  "birthDate": "2015-01-01",
  "gender": "M",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}

POST /api/Employee (√¢ge >70 ‚Üí 400)
{
  "firstName": "Ancien",
  "lastName": "Employ√©",
  "birthDate": "1940-01-01",
  "gender": "M",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}

POST /api/Employee (genre invalide ‚Üí 400)
{
  "firstName": "Test",
  "lastName": "Genre",
  "birthDate": "1990-01-01",
  "gender": "X",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}

POST /api/Employee (titleId inexistant ‚Üí 400)
{
  "firstName": "Test",
  "lastName": "Titre",
  "birthDate": "1990-01-01",
  "gender": "M",
  "titleId": "00000000-0000-0000-0000-000000000000"
}




4- Testez les endpoints du r√¥le Manager  


Utilisateur 3 ‚Äì manager1 (MANAGER)

4.1 ‚Äì Login
POST /api/Auth/login
{
  "username": "manager1",
  "password": "Manager!123"
}

4.2 ‚Äì Ajout du token √† Swagger
Ou simplement allez en haut √† droite dans Swagger et coller le TOKEN_OBTENU (M√âTHODE PR√âF√âR√âE)
4.3 ‚Äì Profil courant
GET /api/Auth/me
(pas de corps requis)


‚úÖ Checklist MANAGER ‚Äì R√©sum√© par points

Authentification
Connexion (POST /api/Auth/login)
V√©rifier profil (GET /api/Auth/me)
Titles (MANAGER peut lire/cr√©er/modifier, mais pas supprimer)
Lire tous les Titles (GET /api/Title)
Cr√©er un Title (POST /api/Title)
Cr√©er plusieurs Titles (POST /api/Title)
Modifier un Title (PUT /api/Title/{id})
R√©cup√©rer un Title sp√©cifique (GET /api/Title/{id})
‚ùå Supprimer un Title (DELETE /api/Title/{id}) ‚Üí 403 attendu
Employees (MANAGER a CRUD complet)
Cr√©er un Employee (POST /api/Employee)
Cr√©er plusieurs Employees (POST /api/Employee)
Lire tous les Employees (GET /api/Employee)
Lire un Employee sp√©cifique (GET /api/Employee/{id})
Modifier un Employee (PUT /api/Employee/{id})
Supprimer un Employee (DELETE /api/Employee/{id})
V√©rifier Employee supprim√© (GET /api/Employee/{id} ‚Üí 404)
Tests n√©gatifs / validations utiles (facultatif mais recommand√©)
DELETE /api/Title/{id} ‚Üí 403 (Forbidden) pour MANAGER
IDs inexistants sur GET/PUT/DELETE ‚Üí 404
JSON invalide (ex. description vide, dates invalides, genre invalide) ‚Üí 400

üß≠ Matrice MANAGER (rappel)
Ressource
GET (list/one)
POST
PUT
DELETE
Titles
‚úÖ / ‚úÖ
‚úÖ
‚úÖ
‚ùå (403)
Employees
‚úÖ / ‚úÖ
‚úÖ
‚úÖ
‚úÖ




Voir l‚Äôannexe pour des tests avec des corps de requ√™te !

Annexe 2 

Annexes ‚Äì Endpoints puis corps JSON √† coller dans Swagger

TITLES
POST /api/Title (cr√©er 1)
{
  "description": "D√©veloppeur Full Stack"
}

POST /api/Title (cr√©er 2)
{
  "description": "Chef de Projet"
}

PUT /api/Title/{id} (modifier)
{
  "description": "D√©veloppeur Full Stack Senior"
}

GET /api/Title
(pas de corps requis)

GET /api/Title/{id}
(pas de corps requis)

DELETE /api/Title/{id}
(pas de corps requis ‚Äî doit renvoyer 403 pour MANAGER)


EMPLOYEES

Remplace titleId par un ID r√©el de Title (cr√©√© ci-dessus).

POST /api/Employee (cr√©er 1)
{
  "firstName": "Claire",
  "lastName": "Dubois",
  "birthDate": "1988-07-22",
  "gender": "F",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}

POST /api/Employee (cr√©er 2)
{
  "firstName": "Hugo",
  "lastName": "Martin",
  "birthDate": "1991-02-10",
  "gender": "M",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}

PUT /api/Employee/{id} (modifier)
{
  "firstName": "Claire",
  "lastName": "Dubois-Dupont",
  "birthDate": "1988-07-22",
  "gender": "F",
  "titleId": "M√äME-ID-QUE-AVANT"
}

GET /api/Employee
(pas de corps requis)

GET /api/Employee/{id}
(pas de corps requis)

DELETE /api/Employee/{id}
(pas de corps requis)

GET /api/Employee/{id} (v√©rifier supprim√© ‚Üí 404)
(pas de corps requis)




üìå Cas n√©gatifs conseill√©s (rapides)

DELETE /api/Title/{id} (MANAGER ‚Üí 403)
{}

PUT /api/Title/{id-inexistant} (‚Üí 404)
{
  "description": "Titre inexistant test"
}

POST /api/Title (description trop courte ‚Üí 400)
{
  "description": "D"
}

POST /api/Employee (genre invalide ‚Üí 400)
{
  "firstName": "Test",
  "lastName": "Genre",
  "birthDate": "1990-01-01",
  "gender": "X",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}

Astuces pratiques

Utilise d‚Äôabord GET /api/Title pour r√©cup√©rer un titleId valide.
Garde √† port√©e les IDs cr√©√©s (Titles & Employees) pour encha√Æner PUT/DELETE/GET.
Si un appel √©choue :
v√©rifier le token (cadenas Swagger),
v√©rifier le r√¥le (GET /api/Auth/me),
v√©rifier l‚ÄôID,
valider le JSON.


Exercice : 
Je rajouterais juste ces petits compl√©ments utiles pour √™tre vraiment exhaustif c√¥t√© MANAGER :
V√©rifs d‚Äôautorisation (401/403)
GET /api/Auth/me (sans token) ‚Üí 401 Unauthorized
DELETE /api/Title/{id} (avec token Manager) ‚Üí 403 Forbidden (rappel)
V√©rifs d‚ÄôIDs inexistants (404)
GET /api/Title/{id-inexistant} ‚Üí 404
PUT /api/Title/{id-inexistant} ‚Üí 404
GET /api/Employee/{id-inexistant} ‚Üí 404
DELETE /api/Employee/{id-inexistant} ‚Üí 404
V√©rifs de validation (400)
POST /api/Title (description trop courte)
{ "description": "D" }
POST /api/Employee (genre invalide)
{
  "firstName": "Test",
  "lastName": "Genre",
  "birthDate": "1990-01-01",
  "gender": "X",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}
POST /api/Employee (titleId inexistant)
{
  "firstName": "Test",
  "lastName": "Titre",
  "birthDate": "1990-01-01",
  "gender": "M",
  "titleId": "00000000-0000-0000-0000-000000000000"
}
Astuce Swagger (rappel)
Ou simplement allez en haut √† droite dans Swagger et coller le TOKEN_OBTENU (M√âTHODE PR√âF√âR√âE).
Si tu ajoutes ces cas (401/403/404/400), ton plan MANAGER est complet. 



5- Testez les endpoints du r√¥le User 




Utilisateur 4 ‚Äì employee1 (USER)
5.1 ‚Äì Login
POST /api/Auth/login
{
  "username": "employee1",
  "password": "Employee!123"
}
5.2 ‚Äì Ajout du token √† Swagger
Ou simplement allez en haut √† droite dans Swagger et coller le TOKEN_OBTENU (M√âTHODE PR√âF√âR√âE)
5.3 ‚Äì Profil courant
GET /api/Auth/me
(pas de corps requis)

‚úÖ Checklist USER ‚Äì R√©sum√© par points

Authentification
Connexion (POST /api/Auth/login)
Voir profil (GET /api/Auth/me)

Titles (USER = lecture seule)
Lire tous les Titles (GET /api/Title)
Lire un Title sp√©cifique (GET /api/Title/{id})
‚ùå Cr√©er un Title (POST /api/Title) ‚Üí 403 attendu
‚ùå Modifier un Title (PUT /api/Title/{id}) ‚Üí 403 attendu
‚ùå Supprimer un Title (DELETE /api/Title/{id}) ‚Üí 403 attendu

Employees (USER = lire / cr√©er / modifier, pas supprimer)
Lire tous les Employees (GET /api/Employee)
Lire un Employee sp√©cifique (GET /api/Employee/{id})
Cr√©er un Employee (POST /api/Employee)
Modifier un Employee (PUT /api/Employee/{id})
‚ùå Supprimer un Employee (DELETE /api/Employee/{id}) ‚Üí 403 attendu

Tests n√©gatifs / validations utiles
GET /api/Auth/me sans token ‚Üí 401 Unauthorized
IDs inexistants sur GET/PUT /api/Employee/{id} ‚Üí 404
JSON invalide (dates/genre/description/titleId) ‚Üí 400




üß≠ Matrice USER (rappel)
Ressource
GET (list/one)
POST
PUT
DELETE
Titles
‚úÖ / ‚úÖ
‚ùå (403)
‚ùå (403)
‚ùå (403)
Employees
‚úÖ / ‚úÖ
‚úÖ
‚úÖ
‚ùå (403)


Annexes ‚Äì Endpoints puis corps JSON √† coller dans Swagger

AUTH
POST /api/Auth/login (connexion)
{
  "username": "employee1",
  "password": "Employee!123"
}

GET /api/Auth/me (profil)
(pas de corps requis)

TITLES (lecture seule)
GET /api/Title
(pas de corps requis)

GET /api/Title/{id}
(pas de corps requis)

POST /api/Title (doit √©chouer ‚Üí 403)
{
  "description": "Tentative non autoris√©e par USER"
}

PUT /api/Title/{id} (doit √©chouer ‚Üí 403)
{
  "description": "Modification non autoris√©e"
}

DELETE /api/Title/{id} (doit √©chouer ‚Üí 403)
(pas de corps requis)

EMPLOYEES
Remplace titleId par un ID r√©el de Title (cr√©√© par Admin/Manager).
POST /api/Employee (cr√©er)
{
  "firstName": "Pierre",
  "lastName": "Durand",
  "birthDate": "1990-03-15",
  "gender": "M",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}

PUT /api/Employee/{id} (modifier)
{
  "firstName": "Pierre",
  "lastName": "Durand-Martin",
  "birthDate": "1990-03-15",
  "gender": "M",
  "titleId": "M√äME-ID-QUE-AVANT"
}

GET /api/Employee
(pas de corps requis)

GET /api/Employee/{id}
(pas de corps requis)

DELETE /api/Employee/{id} (doit √©chouer ‚Üí 403)
(pas de corps requis)


üìå Cas n√©gatifs conseill√©s (rapides)


GET /api/Auth/me (sans token ‚Üí 401)
{}

GET /api/Employee/{id-inexistant} (‚Üí 404)
(pas de corps requis)

PUT /api/Employee/{id-inexistant} (‚Üí 404)
{
  "firstName": "Ghost",
  "lastName": "User",
  "birthDate": "1990-01-01",
  "gender": "M",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}

POST /api/Employee (genre invalide ‚Üí 400)
{
  "firstName": "Test",
  "lastName": "Genre",
  "birthDate": "1990-01-01",
  "gender": "X",
  "titleId": "REMPLACER-AVEC-ID-TITLE-VALIDE"
}


POST /api/Employee (titleId inexistant ‚Üí 400)
{
  "firstName": "Test",
  "lastName": "Titre",
  "birthDate": "1990-01-01",
  "gender": "M",
  "titleId": "00000000-0000-0000-0000-000000000000"
}

Astuces pratiques
Commence par GET /api/Title pour r√©cup√©rer un titleId valide.
Garde les IDs cr√©√©s sous la main pour tester PUT/GET.
Si un appel √©choue : v√©rifie token (cadenas) ‚Üí r√¥le ‚Üí ID ‚Üí JSON.




