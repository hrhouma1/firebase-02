### üë®‚Äçüè´ TESTS PROFESSEUR
### Pr√©requis: Cr√©er le professeur via 01-admin.http

@apiUrl = http://localhost:5001/backend-demo-1/us-central1/api
@authUrl = http://localhost:9099/identitytoolkit.googleapis.com/v1

### Se connecter en tant que professeur
# @name loginProfessor
POST {{authUrl}}/accounts:signInWithPassword?key=anything
Content-Type: application/json

{
  "email": "prof.martin@school.com",
  "password": "prof123",
  "returnSecureToken": true
}

@professorToken = {{loginProfessor.response.body.idToken}}

### ============================================
### GESTION DU PROFIL
### ============================================

### 1. Voir son profil
GET {{apiUrl}}/v1/profile
Authorization: Bearer {{professorToken}}

### 2. Modifier son profil
PUT {{apiUrl}}/v1/profile
Authorization: Bearer {{professorToken}}
Content-Type: application/json

{
  "firstName": "Jean-Pierre",
  "lastName": "Martin"
}

### ============================================
### GESTION DES COURS
### ============================================

### 3. Cr√©er un cours (Python)
# @name createCoursePython
POST {{apiUrl}}/v1/courses
Authorization: Bearer {{professorToken}}
Content-Type: application/json

{
  "title": "Introduction √† Python",
  "description": "Apprendre les bases de la programmation Python pour d√©butants",
  "maxStudents": 30
}

@coursePythonId = {{createCoursePython.response.body.data.id}}

### 4. Cr√©er un cours (JavaScript)
# @name createCourseJS
POST {{apiUrl}}/v1/courses
Authorization: Bearer {{professorToken}}
Content-Type: application/json

{
  "title": "JavaScript Avanc√©",
  "description": "Concepts avanc√©s de JavaScript ES6+ et programmation asynchrone",
  "maxStudents": 25
}

@courseJSId = {{createCourseJS.response.body.data.id}}

### 5. Cr√©er un cours (TypeScript)
# @name createCourseTS
POST {{apiUrl}}/v1/courses
Authorization: Bearer {{professorToken}}
Content-Type: application/json

{
  "title": "TypeScript pour les d√©veloppeurs JavaScript",
  "description": "Ma√Ætriser TypeScript et le typage statique",
  "maxStudents": 20
}

### 6. Lister MES cours
GET {{apiUrl}}/v1/courses/my
Authorization: Bearer {{professorToken}}

### 7. Lister TOUS les cours disponibles
GET {{apiUrl}}/v1/courses
Authorization: Bearer {{professorToken}}

### 8. Consulter un cours sp√©cifique
GET {{apiUrl}}/v1/courses/{{coursePythonId}}
Authorization: Bearer {{professorToken}}

### 9. Modifier un cours
PUT {{apiUrl}}/v1/courses/{{coursePythonId}}
Authorization: Bearer {{professorToken}}
Content-Type: application/json

{
  "title": "Python pour D√©butants - √âdition 2025",
  "description": "Apprendre Python de z√©ro avec des exemples pratiques",
  "maxStudents": 35
}

### 10. Supprimer un cours
# DELETE {{apiUrl}}/v1/courses/{{courseJSId}}
# Authorization: Bearer {{professorToken}}

### ============================================
### CONSULTER LES INSCRIPTIONS
### ============================================

### 11. Voir les inscriptions au cours Python
GET {{apiUrl}}/v1/courses/{{coursePythonId}}/enrollments
Authorization: Bearer {{professorToken}}

### 12. Voir les inscriptions au cours JavaScript
GET {{apiUrl}}/v1/courses/{{courseJSId}}/enrollments
Authorization: Bearer {{professorToken}}

### ============================================
### GESTION DES NOTES PERSONNELLES
### ============================================

### 13. Cr√©er une note
# @name createNote
POST {{apiUrl}}/v1/notes
Authorization: Bearer {{professorToken}}
Content-Type: application/json

{
  "title": "Id√©es pour le cours Python",
  "content": "Ajouter des exercices sur les listes et dictionnaires. Pr√©voir un mini-projet final."
}

@noteId = {{createNote.response.body.data.id}}

### 14. Lister mes notes
GET {{apiUrl}}/v1/notes
Authorization: Bearer {{professorToken}}

### 15. Modifier une note
PUT {{apiUrl}}/v1/notes/{{noteId}}
Authorization: Bearer {{professorToken}}
Content-Type: application/json

{
  "title": "Plan du cours Python - Semaine 1",
  "content": "Jour 1: Variables et types\nJour 2: Conditions et boucles\nJour 3: Fonctions\nJour 4: Listes et tuples\nJour 5: Mini-projet"
}

### 16. Supprimer une note
# DELETE {{apiUrl}}/v1/notes/{{noteId}}
# Authorization: Bearer {{professorToken}}

### ============================================
### TESTS DE S√âCURIT√â (doivent √©chouer)
### ============================================

### ‚ùå Test 1: Un professeur ne peut PAS cr√©er d'utilisateurs
POST {{apiUrl}}/v1/users
Authorization: Bearer {{professorToken}}
Content-Type: application/json

{
  "email": "unauthorized@test.com",
  "password": "test123",
  "role": "student",
  "firstName": "Test",
  "lastName": "Unauthorized"
}

### ‚ùå Test 2: Un professeur ne peut PAS s'inscrire comme √©tudiant
POST {{apiUrl}}/v1/enrollments
Authorization: Bearer {{professorToken}}
Content-Type: application/json

{
  "courseId": "{{coursePythonId}}"
}

